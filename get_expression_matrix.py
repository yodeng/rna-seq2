#!/usr/bin/env python
#coding:utf-8
import argparse,os,collections,re
parser = argparse.ArgumentParser(description="This Script is used to get the gene expression metrix or transcripts expression metrix by the gene abundance txt file or transcripts.txt file ")
parser.add_argument("-i","--input",type=str,help="the input gene_abundance.txt files generated by 'stringTie -e' or input transcripts.gtf file generated by 'stringTie -e'",required = True,nargs='*')
parser.add_argument("-o","--outfile",type=str,help="The output file",required = True)
parser.add_argument("-t","--type",type=str,help="The expression quality value type, default: 'TPM'",default = "TPM",choices = ["TPM","FPKM"])
parser.add_argument("-v","--version",action="version",version='%(prog)s 1.0')
args = parser.parse_args()

def get_gene_expression_dict(type,abundance_file_list):
    d = collections.OrderedDict()
    samples = [os.path.basename(os.path.dirname(os.path.abspath(i))) for i in abundance_file_list]
    for i in abundance_file_list:
        sn  = samples[abundance_file_list.index(i)]
        with open(i) as fi:
            header = fi.next()
            index = header.strip("\n").split("\t").index(type)
            for line in fi:
                line = line.strip("\n").split("\t")
                d.setdefault(line[0],{})[sn] = line[index]
    for k in d:
        for sn in samples:
            d[k].setdefault(sn,str(float(0)))
    return d
    
def get_trans_expression_dict(type,abundance_file_list):
    d = collections.OrderedDict()
    samples = [os.path.basename(os.path.dirname(os.path.abspath(i))) for i in abundance_file_list]
    for i in abundance_file_list:
        sn = samples[abundance_file_list.index(i)]
        with open(i) as fi:
            for line in fi:
                if re.search('transcript_id "(.+?)";.+?%s "(.+?)";'%type,line):
                    transcript_id,value = re.search('transcript_id "(.+?)";.+?%s "(.+?)";'%type,line).group(1,2)
                    d.setdefault(transcript_id,{})[sn] = value
    for k in d:
        for sn in samples:
            d[k].setdefault(sn,str(float(0)))
    return d    
    
def main():
    samples = [os.path.basename(os.path.dirname(os.path.abspath(i))) for i in args.input]
    if args.input[0].endswith(".gtf"):
        expression = get_trans_expression_dict(args.type,args.input)
        with open(args.outfile,"w") as fo:
            fo.write("Transcript id\t" + "\t".join(samples) + "\n")
            for trans in expression:
                #if any([float(expression[trans][sn]) for sn in samples]):  ## 去除样本中表达值全为0的转录本
                    fo.write(trans + "\t" + "\t".join([expression[trans][sn] for sn in samples]) + "\n")
    else:
        expression = get_gene_expression_dict(args.type,args.input)
        with open(args.outfile,"w") as fo:
            fo.write("Gene id\t" + "\t".join(samples) + "\n")
            for gene in expression:
                #if any([float(expression[gene][sn]) for sn in sampes]):  ## 去除样本中表达值全为0的基因
                    fo.write(gene + "\t" + "\t".join([expression[gene][sn] for sn in samples]) + "\n")   
    
if __name__ == "__main__":
    main()
        
                
    
