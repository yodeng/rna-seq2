#!/usr/bin/env python
#coding:utf-8

import argparse,os,sys,re,fileinput

parser = argparse.ArgumentParser(description="This Script is used to change th gene_id name in *.gtf generated by stringTie,the input gtf file will be covered by output gtf file and be renamed as *.gtf.orl, *.gtf.novel file also generates")
parser.add_argument("-i","--input_gtf",type=str,help="the input transcripts.gtf file",required = True,nargs='*')
parser.add_argument("-g","--ref_gtf",type=str,help="The ref gtf file",required = True)
parser.add_argument("-n","--novel_dir",type=str,help="the output of novel transcripts, if set.")
parser.add_argument("-v","--version",action="version",version='%(prog)s 1.0')
args = parser.parse_args()

def get_tran_gene_dict(gtf):
    gene_tran_dict = {}
    with open(gtf) as ref:
        for line in ref:
            if re.search('gene_id ".+?"; transcript_id ".+?";',line):
                gene_id,transcript_id = re.search('gene_id "(.+?)"; transcript_id "(.+?)";',line).group(1,2)
                gene_tran_dict.setdefault(transcript_id,gene_id)
    return gene_tran_dict

def mkdir(dir,sampls):
    for n in sampls:
        d = os.path.join(dir,n)
        if not os.path.exists(d):
            os.makedirs(d)
        else:
            continue  
    
def main():
    geneDict = get_tran_gene_dict(args.ref_gtf)
    if args.novel_dir:
        mkdir(args.novel_dir,[os.path.basename(os.path.dirname(i)) for i in args.input_gtf])
        for line in fileinput.input(args.input_gtf,backup = ".orl",inplace = 1):
            if re.search('gene_id ".+?"; transcript_id ".+?";',line):
                gene_id,transcript_id = re.search('gene_id "(.+?)"; transcript_id "(.+?)";',line).group(1,2)
                if transcript_id in geneDict:
                    print re.sub(gene_id,geneDict[transcript_id],line),
                else:
                    with open(os.path.join(args.novel_dir,os.path.basename(os.path.dirname(os.path.abspath(fileinput.filename()))),os.path.basename(fileinput.filename()) + ".novel") , "a+") as novel_trans:
                        novel_trans.write(line)
                    print line,
            else:
                with open(os.path.join(args.novel_dir,os.path.basename(os.path.dirname(os.path.abspath(fileinput.filename()))),os.path.basename(fileinput.filename()) + ".novel") , "a+") as novel_trans:
                    novel_trans.write(line)
                print line,
    else:   
        for line in fileinput.input(args.input_gtf,backup = ".orl",inplace = 1):
            if re.search('gene_id ".+?"; transcript_id ".+?";',line):
                gene_id,transcript_id = re.search('gene_id "(.+?)"; transcript_id "(.+?)";',line).group(1,2)
                if transcript_id in geneDict:
                    print re.sub(gene_id,geneDict[transcript_id],line),
                else:
                    print line,
            else:
                print line,

if __name__ == "__main__":
    main()
        

